{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["mod","index","length","generateLife","rowsAmount","columnsAmount","max","initialArray","i","binaryString","Math","floor","random","toString","padStart","push","split","map","item","Boolean","Number","App","useState","fieldSizeRows","setFieldSizeRows","fieldSizeColumns","setFieldSizeColumns","interval","setChangeInterval","cellArray","setCellArray","useEffect","removeInterval","useCallback","clearInterval","handleGameStatusChange","setInterval","previousArray","row","rowIndex","cell","columnIndex","aliveNeighbours","m","k","cellValue","getCellNewState","getNextState","handleGenerateState","handeFileUpload","input","files","file","reader","FileReader","readAsText","onload","result","strNumber","value","onerror","console","log","error","className","cellIndex","htmlFor","id","type","min","placeholder","onChange","e","target","onClick","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAsBA,SAASA,EAAIC,EAAeC,GAC1B,GAAID,IAAUC,EACZ,OAAO,EAET,KAAOD,EAAQ,EAAGA,GAASC,GAC3B,OAAOD,EAWT,SAASE,EAAaC,EAAoBC,GAExC,IADA,IAQoBC,EARhBC,EAA4B,GACvBC,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CACnC,IAAMC,GAMYH,EANgB,KAAD,IAAC,EAAGD,GAOhCK,KAAKC,MAAMD,KAAKE,SAAWN,IAPoBO,SAAS,GAAGC,SAAST,EAAe,KACxFE,EAAaQ,KAAKN,EAAaO,MAAM,IAAIC,KAAK,SAAAC,GAAI,OAAIC,QAAQC,OAAOF,QAEvE,OAAOX,EA2GMc,MApGf,WAAgB,IAAD,EAE6BC,mBAAS,IAFtC,mBAENC,EAFM,KAESC,EAFT,OAGmCF,mBAAS,IAH5C,mBAGNG,EAHM,KAGYC,EAHZ,OAIyBJ,mBAAgC,MAJzD,mBAINK,EAJM,KAIIC,EAJJ,OAKqBN,mBAASnB,EAAaoB,EAAeE,IAL1D,mBAKNI,EALM,KAKKC,EALL,KAObC,qBAAU,WACRN,EAAmB,EAAIC,EAAoB,GAAKD,EAAmB,IAAMC,EAAoB,IAC7FH,EAAgB,EAAIC,EAAiB,GAAKD,EAAgB,KAAOC,EAAiB,OACjF,CAACC,EAAkBF,IAEtB,IAAMS,EAAiBC,uBAAY,WAC7BN,IACFO,cAAcP,GACdC,EAAkB,SAEnB,CAACD,IAEEQ,EAAyBF,uBAAY,WACrCN,EACFK,IAGAJ,EAAkBQ,aAAY,kBAAMN,GAAa,SAAAO,GAAa,OAxEpE,SAAsBA,GACpB,IAAMjC,EAAaiC,EAAcnC,OAC3BG,EAAgBgC,EAAc,GAAGnC,OACvC,OAAOmC,EAAcpB,KAAI,SAACqB,EAAKC,GAC7B,OAAOD,EAAIrB,KAAI,SAACuB,EAAMC,GAGpB,IAFA,IAAIC,EAAkB,EAEbC,GAAK,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,GAAK,EAAGA,EAAI,EAAGA,IACZ,IAAND,GAAiB,IAANC,GACfP,EAAcrC,EAAIuC,EAAWI,EAAGvC,IAAaJ,EAAIyC,EAAcG,EAAGvC,KAC/DqC,IAGP,OAaN,SAAyBG,EAAoBH,GAC3C,OAAIG,EACyB,IAApBH,GAA6C,IAApBA,EAGP,IAApBA,EAlBII,CAAgBN,EAAME,SA0DqCK,CAAaV,QAAiB,QAEjG,CAACL,EAAgBL,IAEdqB,EAAsBf,uBAAY,WACtCH,EAAa3B,EAAaoB,EAAeE,IACzCO,MACC,CAACT,EAAeE,EAAkBO,IAE/BiB,EAAkBhB,uBAAY,SAACiB,GACnC,GAAKA,EAAMC,MAAX,CAEA,IAAIC,EAAOF,EAAMC,MAAM,GACnBE,EAAS,IAAIC,WACjBD,EAAOE,WAAWH,GAClBC,EAAOG,OAAS,WACd,GAAKH,EAAOI,OAAZ,CAEA,IACMlD,EADa8C,EAAOI,OAAO5C,WAAWG,MAAM,QAClBC,KAAI,SAAAqB,GAAG,OAClCA,EAAItB,MAAM,IAAIC,KAAI,SAAAyC,GAAS,OACzBvC,QAAQC,OAAOsC,UACtB1B,IACAF,EAAavB,GACb2C,EAAMS,MAAQ,KAEhBN,EAAOO,QAAU,WACfC,QAAQC,IAAIT,EAAOU,WAEpB,CAAC/B,IAEJ,OACE,sBAAKgC,UAAU,MAAf,UACE,gCACE,gCACGnC,EAAUZ,KAAI,SAACqB,EAAKC,GAAN,OACX,6BACGD,EAAIrB,KAAI,SAACuB,EAAMyB,GAAP,OACP,oBAA2CD,UAAWxB,EAAO,QAAU,OAAvE,SAAgFA,GAAvE,IAAMD,EAAW,IAAM0B,OAF3B,IAAM1B,UAQvB,sBAAKyB,UAAU,OAAf,UACE,gCACE,uBAAOE,QAAQ,OAAf,6BACA,uBAAOC,GAAG,OAAOC,KAAK,SAASC,IAAI,IAAI/D,IAAI,KACzCqD,MAAOpC,EACP+C,YAAY,mBACZC,SAAU,SAAAC,GAAC,OAAIhD,EAAiBJ,OAAOoD,EAAEC,OAAOd,cAEpD,gCACE,uBAAOO,QAAQ,UAAf,gCACA,uBAAOC,GAAG,UAAUC,KAAK,SAASC,IAAI,IAAI/D,IAAI,KAC5CqD,MAAOlC,EACP6C,YAAY,mBACZC,SAAU,SAAAC,GAAC,OAAI9C,EAAoBN,OAAOoD,EAAEC,OAAOd,cAEvD,wBAAQe,QAAS1B,EAAqBgB,UAAU,YAAhD,2BAGA,8BACE,wBAAOA,UAAU,aAAjB,UACI,uBAAOI,KAAK,OAAOG,SAAU,SAAAC,GAAC,OAAIvB,EAAgBuB,EAAEG,kBADxD,+BAKF,wBAAQD,QAASvC,EAAwB6B,UAAU,cAAnD,SACGrC,EAAW,YAAc,sBClIrBiD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17c1c2a3.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport './App.css';\n\nfunction getNextState(previousArray: boolean[][]): boolean[][] {\n  const rowsAmount = previousArray.length;\n  const columnsAmount = previousArray[0].length;\n  return previousArray.map((row, rowIndex) => {\n    return row.map((cell, columnIndex) => {\n      let aliveNeighbours = 0;\n      // checking Moore neighbourhood and count alive neighbours\n      for (let m = -1; m < 2; m++) {\n        for (let k = -1; k < 2; k++) {\n          if (m === 0 && k === 0) continue; // if checking \n          previousArray[mod(rowIndex + m, rowsAmount)][mod(columnIndex + k, columnsAmount)] \n          && aliveNeighbours++;\n        }\n      }\n      return getCellNewState(cell, aliveNeighbours);\n    })\n  })\n}\n\nfunction mod(index: number, length: number) {\n  if (index === length) {\n    return 0;\n  }\n  for (; index < 0; index += length);\n  return index;\n}\n\nfunction getCellNewState(cellValue: boolean, aliveNeighbours: number) {\n  if (cellValue) {\n    return aliveNeighbours === 3 || aliveNeighbours === 2 ? true : false\n  }\n  // cellValue = 0\n  return aliveNeighbours === 3 ? true : false\n}\n\nfunction generateLife(rowsAmount: number, columnsAmount: number) {\n  let initialArray: boolean[][] = [];\n  for (let i = 0; i < rowsAmount; i++) {\n    const binaryString = getRandomInt(2**columnsAmount).toString(2).padStart(columnsAmount, '0');\n    initialArray.push(binaryString.split('').map( item => Boolean(Number(item)) ));\n  }\n  return initialArray;\n}\n\nfunction getRandomInt(max: number) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction App() {\n\n  const [fieldSizeRows, setFieldSizeRows] = useState(50);\n  const [fieldSizeColumns, setFieldSizeColumns] = useState(50);\n  const [interval, setChangeInterval] = useState<NodeJS.Timeout | null>(null);\n  const [cellArray, setCellArray] = useState(generateLife(fieldSizeRows, fieldSizeColumns))\n\n  useEffect(() => {\n    fieldSizeColumns < 1 ? setFieldSizeColumns(1) : fieldSizeColumns > 50 && setFieldSizeColumns(50);\n    fieldSizeRows < 1 ? setFieldSizeRows(1) : fieldSizeRows > 100 && setFieldSizeRows(100);\n  }, [fieldSizeColumns, fieldSizeRows])\n\n  const removeInterval = useCallback(() => {\n    if (interval) {\n      clearInterval(interval);\n      setChangeInterval(null);\n    }\n  }, [interval])\n\n  const handleGameStatusChange = useCallback(() => {\n    if (interval) {\n      removeInterval();\n    }\n    else {\n      setChangeInterval(setInterval(() => setCellArray(previousArray => getNextState(previousArray)), 1000))\n    }\n  }, [removeInterval, interval])\n\n  const handleGenerateState = useCallback(() => {\n    setCellArray(generateLife(fieldSizeRows, fieldSizeColumns));\n    removeInterval();\n  }, [fieldSizeRows, fieldSizeColumns, removeInterval])\n\n  const handeFileUpload = useCallback((input: HTMLInputElement) => {\n    if (!input.files)\n      return;\n    let file = input.files[0];\n    let reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = function() {\n      if (!reader.result) \n        return;\n      const stringRows = reader.result.toString().split('\\r\\n');\n      const initialArray = stringRows.map(row => \n           row.split('').map(strNumber => \n             Boolean(Number(strNumber))));\n      removeInterval();\n      setCellArray(initialArray);\n      input.value = '';\n    };\n    reader.onerror = function() {\n      console.log(reader.error);\n    };\n  }, [removeInterval])\n\n  return (\n    <div className=\"App\">\n      <table>\n        <tbody>\n          {cellArray.map((row, rowIndex) => \n              <tr key={'r' + rowIndex}>\n                {row.map((cell, cellIndex) => \n                  <td key={'r' + rowIndex + 'c' + cellIndex} className={cell ? 'alive' : 'dead'}>{cell}</td>\n                )}\n              </tr>\n          )}\n        </tbody>\n      </table>\n      <div className='menu'>\n        <div>\n          <label htmlFor='rows'>Set rows amount</label>\n          <input id=\"rows\" type='number' min='5' max='50' \n            value={fieldSizeRows} \n            placeholder='Field size (n*n)' \n            onChange={e => setFieldSizeRows(Number(e.target.value))}/>\n        </div>\n        <div>\n          <label htmlFor='columns'>Set columns amount</label>\n          <input id=\"columns\" type='number' min='5' max='50' \n            value={fieldSizeColumns} \n            placeholder='Field size (n*n)' \n            onChange={e => setFieldSizeColumns(Number(e.target.value))}/>\n        </div>\n        <button onClick={handleGenerateState} className=\"generator\">\n          Generate life\n        </button>\n        <div>\n          <label className='file-label'>\n              <input type=\"file\" onChange={e => handeFileUpload(e.currentTarget)}/>\n              Generate life from file\n          </label>\n        </div>\n        <button onClick={handleGameStatusChange} className=\"game-status\">\n          {interval ? 'Stop game' : 'Start game'}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}